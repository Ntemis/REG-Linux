From 780ae53eb49a936dd781ac694cb037488c3ecb82 Mon Sep 17 00:00:00 2001
From: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date: Mon, 31 Mar 2025 21:09:30 +0200
Subject: [PATCH 93/95] drm/meson: try to keep CVBS and HDMI clocks active in
 parallel

Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
---
 drivers/gpu/drm/meson/meson_drv.c  |   9 +--
 drivers/gpu/drm/meson/meson_drv.h  |   5 +-
 drivers/gpu/drm/meson/meson_vclk.c | 102 +++++++++++++++++++----------
 3 files changed, 75 insertions(+), 41 deletions(-)

diff --git a/drivers/gpu/drm/meson/meson_drv.c b/drivers/gpu/drm/meson/meson_drv.c
index e25a15b492f2..28951fa0add0 100644
--- a/drivers/gpu/drm/meson/meson_drv.c
+++ b/drivers/gpu/drm/meson/meson_drv.c
@@ -191,11 +191,12 @@ static int meson_video_clock_init(struct meson_drm *priv)
 
 static void meson_video_clock_exit(struct meson_drm *priv)
 {
-	if (priv->clk_dac_enabled)
-		clk_disable(priv->clk_dac);
+	unsigned int i;
 
-	if (priv->clk_venc_enabled)
-		clk_disable(priv->clk_venc);
+	for (i = 0; i < VPU_VID_CLK_NUM; i++) {
+		if (priv->vid_clk_enabled[i])
+			clk_disable(priv->vid_clks[i].clk);
+	}
 
 	clk_bulk_unprepare(priv->num_intr_clks, priv->intr_clks);
 	clk_bulk_unprepare(VPU_VID_CLK_NUM, priv->vid_clks);
diff --git a/drivers/gpu/drm/meson/meson_drv.h b/drivers/gpu/drm/meson/meson_drv.h
index fdbd8a6aae4d..a360c035dab5 100644
--- a/drivers/gpu/drm/meson/meson_drv.h
+++ b/drivers/gpu/drm/meson/meson_drv.h
@@ -95,11 +95,8 @@ struct meson_drm {
 	unsigned int num_intr_clks;
 	bool intr_clks_enabled;
 	struct clk_bulk_data vid_clks[VPU_VID_CLK_NUM];
+	bool vid_clk_enabled[VPU_VID_CLK_NUM];
 	bool vid_clk_rate_exclusive[VPU_VID_CLK_NUM];
-	struct clk *clk_venc;
-	bool clk_venc_enabled;
-	struct clk *clk_dac;
-	bool clk_dac_enabled;
 	struct reset_control_bulk_data vid_pll_resets[VPU_RESET_VID_PLL_NUM];
 
 	/* Components Data */
diff --git a/drivers/gpu/drm/meson/meson_vclk.c b/drivers/gpu/drm/meson/meson_vclk.c
index 6057c3f2eb3e..beb511936313 100644
--- a/drivers/gpu/drm/meson/meson_vclk.c
+++ b/drivers/gpu/drm/meson/meson_vclk.c
@@ -1084,34 +1084,51 @@ static void meson_vclk_disable_ccf(struct meson_drm *priv)
 		priv->vid_clk_rate_exclusive[i] = false;
 	}
 
-	if (priv->clk_dac_enabled) {
-		clk_disable(priv->clk_dac);
-		priv->clk_dac_enabled = false;
-	}
+	for (i = 0; i < VPU_VID_CLK_NUM; i++) {
+		if (!priv->vid_clk_enabled[i])
+			continue;
 
-	if (priv->clk_venc_enabled) {
-		clk_disable(priv->clk_venc);
-		priv->clk_venc_enabled = false;
+		clk_disable(priv->vid_clks[i].clk);
+		priv->vid_clk_enabled[i] = false;
 	}
 }
 
+static unsigned long meson_vclk_get_rate(struct meson_drm *priv,
+					 enum vpu_bulk_clk_id clk_id)
+{
+	struct clk *clk = priv->vid_clks[clk_id].clk;
+
+	return clk_get_rate(clk);
+}
+
 static void meson_vclk_set_ccf(struct meson_drm *priv, unsigned int target,
 			       bool hdmi_use_enci, unsigned long long phy_freq,
 			       unsigned long long dac_freq,
 			       unsigned long long venc_freq)
 {
-	enum vpu_bulk_clk_id venc_clk_id, dac_clk_id;
+	unsigned long other_venc_clk_freq, other_dac_clk_freq;
+	enum vpu_bulk_clk_id venc_clk_id, other_venc_clk_id;
+	enum vpu_bulk_clk_id dac_clk_id, other_dac_clk_id;
 	int ret;
 
-	if (target == MESON_VCLK_TARGET_CVBS || hdmi_use_enci)
+	if (target == MESON_VCLK_TARGET_CVBS || hdmi_use_enci) {
 		venc_clk_id = VPU_VID_CLK_CTS_ENCI;
-	else
+		other_venc_clk_id = VPU_VID_CLK_CTS_ENCP;
+	} else {
 		venc_clk_id = VPU_VID_CLK_CTS_ENCP;
+		other_venc_clk_id = VPU_VID_CLK_CTS_ENCI;
+	}
 
-	if (target == MESON_VCLK_TARGET_CVBS)
+	if (target == MESON_VCLK_TARGET_CVBS) {
 		dac_clk_id = VPU_VID_CLK_CTS_VDAC0;
-	else
+		other_dac_clk_id = VPU_VID_CLK_HDMI_TX_PIXEL;
+	} else {
 		dac_clk_id = VPU_VID_CLK_HDMI_TX_PIXEL;
+		other_dac_clk_id = VPU_VID_CLK_CTS_VDAC0;
+	}
+
+	other_venc_clk_freq = meson_vclk_get_rate(priv, other_venc_clk_id);
+	other_dac_clk_freq = meson_vclk_get_rate(priv, other_dac_clk_id);
 
 	/*
 	 * The TMDS clock also updates the PLL. Protect the PLL rate so all
@@ -1133,12 +1150,24 @@ static void meson_vclk_set_ccf(struct meson_drm *priv, unsigned int target,
 	ret = meson_vclk_set_rate_exclusive(priv, venc_clk_id, venc_freq);
 	if (ret) {
 		dev_warn(priv->dev,
-			 "Failed to set VENC clock to %lluHz while TMDS clock is %lluHz: %d\n",
-			 venc_freq, phy_freq, ret);
+			 "Failed to set VENC clock (%u) to %lluHz while TMDS clock is %lluHz: %d\n",
+			 venc_clk_id, venc_freq, phy_freq, ret);
 		return;
 	}
 
-	priv->clk_venc = priv->vid_clks[venc_clk_id].clk;
+	/*
+	 * Try to keep the "other" VENC clock as close as possible to it's
+	 * original requested rate in an attempt to keep HDMI and CVBS outputs
+	 * active.
+	 */
+	ret = meson_vclk_set_rate_exclusive(priv, other_venc_clk_id,
+					    other_venc_clk_freq);
+	if (ret) {
+		dev_warn(priv->dev,
+			 "Failed to set other VENC clock (%u) to %luHz while TMDS clock is %lluHz: %d\n",
+			 other_venc_clk_id, other_venc_clk_freq, phy_freq, ret);
+		return;
+	}
 
 	/*
 	 * after changing any of the VID_PLL_* clocks (which can happen when
@@ -1151,33 +1180,40 @@ static void meson_vclk_set_ccf(struct meson_drm *priv, unsigned int target,
 	ret = meson_vclk_set_rate_exclusive(priv, dac_clk_id, dac_freq);
 	if (ret) {
 		dev_warn(priv->dev,
-			 "Failed to set pixel clock to %lluHz while TMDS clock is %lluHz: %d\n",
-			 dac_freq, phy_freq, ret);
+			 "Failed to set pixel clock (%u) to %lluHz while TMDS clock is %lluHz: %d\n",
+			 dac_clk_id, dac_freq, phy_freq, ret);
 		return;
 	}
 
-	priv->clk_dac = priv->vid_clks[dac_clk_id].clk;
+	/*
+	 * Try to keep the "other" pixel clock as close as possible to it's
+	 * original requested rate in an attempt to keep HDMI and CVBS outputs
+	 * active.
+	 */
+	ret = meson_vclk_set_rate_exclusive(priv, other_dac_clk_id,
+					    other_dac_clk_freq);
+	if (ret) {
+		dev_warn(priv->dev,
+			 "Failed to set other pixel clock (%u) to %luHz while TMDS clock is %lluHz: %d\n",
+			 other_dac_clk_id, other_dac_clk_freq, phy_freq, ret);
+		return;
+	}
 }
 
 static void meson_vclk_enable_ccf(struct meson_drm *priv)
 {
+	unsigned int i;
 	int ret;
 
-	ret = clk_enable(priv->clk_venc);
-	if (ret)
-		dev_err(priv->dev,
-			"Failed to re-enable the VENC clock at %luHz: %d\n",
-			clk_get_rate(priv->clk_venc), ret);
-	else
-		priv->clk_venc_enabled = true;
-
-	ret = clk_enable(priv->clk_dac);
-	if (ret)
-		dev_err(priv->dev,
-			"Failed to re-enable the pixel clock at %luHz: %d\n",
-			clk_get_rate(priv->clk_dac), ret);
-	else
-		priv->clk_dac_enabled = true;
+	for (i = 0; i < VPU_VID_CLK_NUM; i++) {
+		ret = clk_enable(priv->vid_clks[i].clk);
+		if (ret)
+			dev_err(priv->dev,
+				"Failed to re-enable clock %u at %luHz: %d\n",
+				i, clk_get_rate(priv->vid_clks[i].clk), ret);
+		else
+			priv->vid_clk_enabled[i] = true;
+	}
 }
 
 void meson_vclk_setup(struct meson_drm *priv, unsigned int target,
-- 
2.43.0

