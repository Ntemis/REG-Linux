From 98c70e7648edd9d56ca6d2850d62866a10bf4b15 Mon Sep 17 00:00:00 2001
From: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date: Sun, 1 Jun 2025 14:25:12 +0200
Subject: [PATCH 94/95] net: phy: meson-gxl: Add support for banked read/write
 without test mode

The existing initialization within the meson-gxl PHY driver requires the
TEST_MODE bit to be set. This however is not the case for all read/write
operations as WOL (wake-on-lan) support for example has to be configured
without the TEST_MODE bit set.
Update the banked read/write code so callers can opt in/out of test
mode.

Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
---
 drivers/net/phy/meson-gxl.c | 27 ++++++++++++++++-----------
 1 file changed, 16 insertions(+), 11 deletions(-)

diff --git a/drivers/net/phy/meson-gxl.c b/drivers/net/phy/meson-gxl.c
index 962ebbbc1348..8e4a54b4f192 100644
--- a/drivers/net/phy/meson-gxl.c
+++ b/drivers/net/phy/meson-gxl.c
@@ -38,10 +38,15 @@
 #define FR_PLL_DIV0	0x1c
 #define FR_PLL_DIV1	0x1d
 
-static int meson_gxl_open_banks(struct phy_device *phydev)
+static int meson_gxl_open_bank(struct phy_device *phydev, bool test_mode,
+			       unsigned int bank)
 {
 	int ret;
 
+	if (!test_mode)
+		return phy_write(phydev, TSTCNTL,
+				 FIELD_PREP(TSTCNTL_REG_BANK_SEL, bank));
+
 	/* Enable Analog and DSP register Bank access by
 	 * toggling TSTCNTL_TEST_MODE bit in the TSTCNTL register
 	 */
@@ -62,18 +67,18 @@ static void meson_gxl_close_banks(struct phy_device *phydev)
 	phy_write(phydev, TSTCNTL, 0);
 }
 
-static int meson_gxl_read_reg(struct phy_device *phydev,
+static int meson_gxl_read_reg(struct phy_device *phydev, bool test_mode,
 			      unsigned int bank, unsigned int reg)
 {
 	int ret;
 
-	ret = meson_gxl_open_banks(phydev);
+	ret = meson_gxl_open_bank(phydev, bank, test_mode);
 	if (ret)
 		goto out;
 
 	ret = phy_write(phydev, TSTCNTL, TSTCNTL_READ |
 			FIELD_PREP(TSTCNTL_REG_BANK_SEL, bank) |
-			TSTCNTL_TEST_MODE |
+			(test_mode ? TSTCNTL_TEST_MODE : 0) |
 			FIELD_PREP(TSTCNTL_READ_ADDRESS, reg));
 	if (ret)
 		goto out;
@@ -85,13 +90,13 @@ static int meson_gxl_read_reg(struct phy_device *phydev,
 	return ret;
 }
 
-static int meson_gxl_write_reg(struct phy_device *phydev,
+static int meson_gxl_write_reg(struct phy_device *phydev, bool test_mode,
 			       unsigned int bank, unsigned int reg,
 			       uint16_t value)
 {
 	int ret;
 
-	ret = meson_gxl_open_banks(phydev);
+	ret = meson_gxl_open_bank(phydev, bank, test_mode);
 	if (ret)
 		goto out;
 
@@ -101,7 +106,7 @@ static int meson_gxl_write_reg(struct phy_device *phydev,
 
 	ret = phy_write(phydev, TSTCNTL, TSTCNTL_WRITE |
 			FIELD_PREP(TSTCNTL_REG_BANK_SEL, bank) |
-			TSTCNTL_TEST_MODE |
+			(test_mode ? TSTCNTL_TEST_MODE : 0) |
 			FIELD_PREP(TSTCNTL_WRITE_ADDRESS, reg));
 
 out:
@@ -115,17 +120,17 @@ static int meson_gxl_config_init(struct phy_device *phydev)
 	int ret;
 
 	/* Enable fractional PLL */
-	ret = meson_gxl_write_reg(phydev, BANK_BIST, FR_PLL_CONTROL, 0x5);
+	ret = meson_gxl_write_reg(phydev, true, BANK_BIST, FR_PLL_CONTROL, 0x5);
 	if (ret)
 		return ret;
 
 	/* Program fraction FR_PLL_DIV1 */
-	ret = meson_gxl_write_reg(phydev, BANK_BIST, FR_PLL_DIV1, 0x029a);
+	ret = meson_gxl_write_reg(phydev, true, BANK_BIST, FR_PLL_DIV1, 0x029a);
 	if (ret)
 		return ret;
 
 	/* Program fraction FR_PLL_DIV1 */
-	ret = meson_gxl_write_reg(phydev, BANK_BIST, FR_PLL_DIV0, 0xaaaa);
+	ret = meson_gxl_write_reg(phydev, true, BANK_BIST, FR_PLL_DIV0, 0xaaaa);
 	if (ret)
 		return ret;
 
@@ -160,7 +165,7 @@ static int meson_gxl_read_status(struct phy_device *phydev)
 			goto read_status_continue;
 
 		/* Aneg is done, let's check everything is fine */
-		wol = meson_gxl_read_reg(phydev, BANK_WOL, LPI_STATUS);
+		wol = meson_gxl_read_reg(phydev, true, BANK_WOL, LPI_STATUS);
 		if (wol < 0)
 			return wol;
 
-- 
2.43.0

