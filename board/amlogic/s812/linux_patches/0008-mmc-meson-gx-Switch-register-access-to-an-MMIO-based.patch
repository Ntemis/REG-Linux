From 0a5e9b00baea67286211c0985883eab1a5396a17 Mon Sep 17 00:00:00 2001
From: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date: Wed, 20 Oct 2021 22:06:47 +0200
Subject: [PATCH 08/95] mmc: meson-gx: Switch register access to an MMIO based
 regmap

Commit 8a38a4d51c5055 ("mmc: meson-gx: do not use memcpy_to/fromio for
dram-access-quirk") fixes an issue when the registers are read or
written with accessors that aren't 32-bit wide. According to a comment
from the vendor driver states that only 32-bit ABP (bus) access is
supported.

Switch the driver over to an MMIO based regmap to ensure that every
access is always 32-bit wide. This also simplifies the code in some
areas as regmap provides various helpers (e.g. regmap_update_bits
and regmap_bulk_{read,write}) that we can use.

Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
---
 drivers/mmc/host/Kconfig        |   1 +
 drivers/mmc/host/meson-gx-mmc.c | 187 ++++++++++++++------------------
 2 files changed, 84 insertions(+), 104 deletions(-)

diff --git a/drivers/mmc/host/Kconfig b/drivers/mmc/host/Kconfig
index e65fa5330952..c6983f36a357 100644
--- a/drivers/mmc/host/Kconfig
+++ b/drivers/mmc/host/Kconfig
@@ -478,6 +478,7 @@ config MMC_MESON_GX
 	tristate "Amlogic S905/GX*/AXG SD/MMC Host Controller support"
 	depends on ARCH_MESON|| COMPILE_TEST
 	depends on COMMON_CLK
+	select REGMAP_MMIO
 	help
 	  This selects support for the Amlogic SD/MMC Host Controller
 	  found on the S905/GX*/AXG family of SoCs.  This controller is
diff --git a/drivers/mmc/host/meson-gx-mmc.c b/drivers/mmc/host/meson-gx-mmc.c
index 694bb443d5f3..83d217cc79fd 100644
--- a/drivers/mmc/host/meson-gx-mmc.c
+++ b/drivers/mmc/host/meson-gx-mmc.c
@@ -22,6 +22,7 @@
 #include <linux/io.h>
 #include <linux/clk.h>
 #include <linux/clk-provider.h>
+#include <linux/regmap.h>
 #include <linux/regulator/consumer.h>
 #include <linux/reset.h>
 #include <linux/interrupt.h>
@@ -154,7 +155,8 @@ struct meson_host {
 	struct	mmc_host	*mmc;
 	struct	mmc_command	*cmd;
 
-	void __iomem *regs;
+	struct regmap *regmap;
+
 	struct clk *mux_clk;
 	struct clk *mmc_clk;
 	unsigned long req_rate;
@@ -167,7 +169,6 @@ struct meson_host {
 
 	unsigned int bounce_buf_size;
 	void *bounce_buf;
-	void __iomem *bounce_iomem_buf;
 	dma_addr_t bounce_dma_addr;
 	struct sd_emmc_desc *descs;
 	dma_addr_t descs_dma_addr;
@@ -322,8 +323,6 @@ static void meson_mmc_post_req(struct mmc_host *mmc, struct mmc_request *mrq,
  */
 static void meson_mmc_clk_gate(struct meson_host *host)
 {
-	u32 cfg;
-
 	if (host->pins_clk_gate) {
 		pinctrl_select_state(host->pinctrl, host->pins_clk_gate);
 	} else {
@@ -331,23 +330,17 @@ static void meson_mmc_clk_gate(struct meson_host *host)
 		 * If the pinmux is not provided - default to the classic and
 		 * unsafe method
 		 */
-		cfg = readl(host->regs + SD_EMMC_CFG);
-		cfg |= CFG_STOP_CLOCK;
-		writel(cfg, host->regs + SD_EMMC_CFG);
+		regmap_set_bits(host->regmap, SD_EMMC_CFG, CFG_STOP_CLOCK);
 	}
 }
 
 static void meson_mmc_clk_ungate(struct meson_host *host)
 {
-	u32 cfg;
-
 	if (host->pins_clk_gate)
 		pinctrl_select_default_state(host->dev);
 
 	/* Make sure the clock is not stopped in the controller */
-	cfg = readl(host->regs + SD_EMMC_CFG);
-	cfg &= ~CFG_STOP_CLOCK;
-	writel(cfg, host->regs + SD_EMMC_CFG);
+	regmap_clear_bits(host->regmap, SD_EMMC_CFG, CFG_STOP_CLOCK);
 }
 
 static int meson_mmc_clk_set(struct meson_host *host, unsigned long rate,
@@ -355,7 +348,6 @@ static int meson_mmc_clk_set(struct meson_host *host, unsigned long rate,
 {
 	struct mmc_host *mmc = host->mmc;
 	int ret;
-	u32 cfg;
 
 	/* Same request - bail-out */
 	if (host->ddr == ddr && host->req_rate == rate)
@@ -371,18 +363,15 @@ static int meson_mmc_clk_set(struct meson_host *host, unsigned long rate,
 		return 0;
 
 	/* Stop the clock during rate change to avoid glitches */
-	cfg = readl(host->regs + SD_EMMC_CFG);
-	cfg |= CFG_STOP_CLOCK;
-	writel(cfg, host->regs + SD_EMMC_CFG);
+	regmap_set_bits(host->regmap, SD_EMMC_CFG, CFG_STOP_CLOCK);
 
 	if (ddr) {
 		/* DDR modes require higher module clock */
 		rate <<= 1;
-		cfg |= CFG_DDR;
+		regmap_set_bits(host->regmap, SD_EMMC_CFG, CFG_DDR);
 	} else {
-		cfg &= ~CFG_DDR;
+		regmap_clear_bits(host->regmap, SD_EMMC_CFG, CFG_DDR);
 	}
-	writel(cfg, host->regs + SD_EMMC_CFG);
 	host->ddr = ddr;
 
 	ret = clk_set_rate(host->mmc_clk, rate);
@@ -416,7 +405,7 @@ static int meson_mmc_clk_set(struct meson_host *host, unsigned long rate,
  * generating the MMC clock.  Use the clock framework to create and
  * manage these clocks.
  */
-static int meson_mmc_clk_init(struct meson_host *host)
+static int meson_mmc_clk_init(struct meson_host *host, void __iomem *regs)
 {
 	struct clk_init_data init;
 	struct clk_mux *mux;
@@ -435,7 +424,7 @@ static int meson_mmc_clk_init(struct meson_host *host)
 	clk_reg |= FIELD_PREP(CLK_RX_PHASE_MASK, CLK_PHASE_0);
 	if (host->mmc->caps & MMC_CAP_SDIO_IRQ)
 		clk_reg |= CLK_IRQ_SDIO_SLEEP(host);
-	writel(clk_reg, host->regs + SD_EMMC_CLOCK);
+	regmap_write(host->regmap, SD_EMMC_CLOCK, clk_reg);
 
 	/* get the mux parents */
 	for (i = 0; i < MUX_CLK_NUM_PARENTS; i++) {
@@ -463,7 +452,7 @@ static int meson_mmc_clk_init(struct meson_host *host)
 	init.parent_names = mux_parent_names;
 	init.num_parents = MUX_CLK_NUM_PARENTS;
 
-	mux->reg = host->regs + SD_EMMC_CLOCK;
+	mux->reg = regs + SD_EMMC_CLOCK;
 	mux->shift = __ffs(CLK_SRC_MASK);
 	mux->mask = CLK_SRC_MASK >> mux->shift;
 	mux->hw.init = &init;
@@ -485,7 +474,7 @@ static int meson_mmc_clk_init(struct meson_host *host)
 	init.parent_names = clk_parent;
 	init.num_parents = 1;
 
-	div->reg = host->regs + SD_EMMC_CLOCK;
+	div->reg = regs + SD_EMMC_CLOCK;
 	div->shift = __ffs(CLK_DIV_MASK);
 	div->width = __builtin_popcountl(CLK_DIV_MASK);
 	div->hw.init = &init;
@@ -506,21 +495,14 @@ static int meson_mmc_clk_init(struct meson_host *host)
 
 static void meson_mmc_disable_resampling(struct meson_host *host)
 {
-	unsigned int val = readl(host->regs + host->data->adjust);
-
-	val &= ~ADJUST_ADJ_EN;
-	writel(val, host->regs + host->data->adjust);
+	regmap_clear_bits(host->regmap, host->data->adjust, ADJUST_ADJ_EN);
 }
 
 static void meson_mmc_reset_resampling(struct meson_host *host)
 {
-	unsigned int val;
-
 	meson_mmc_disable_resampling(host);
 
-	val = readl(host->regs + host->data->adjust);
-	val &= ~ADJUST_ADJ_DELAY_MASK;
-	writel(val, host->regs + host->data->adjust);
+	regmap_clear_bits(host->regmap, host->data->adjust, ADJUST_ADJ_DELAY_MASK);
 }
 
 static int meson_mmc_resampling_tuning(struct mmc_host *mmc, u32 opcode)
@@ -533,19 +515,20 @@ static int meson_mmc_resampling_tuning(struct mmc_host *mmc, u32 opcode)
 	max_dly = DIV_ROUND_UP(clk_get_rate(host->mux_clk),
 			       clk_get_rate(host->mmc_clk));
 
-	val = readl(host->regs + host->data->adjust);
-	val |= ADJUST_ADJ_EN;
-	writel(val, host->regs + host->data->adjust);
+	regmap_set_bits(host->regmap, host->data->adjust, ADJUST_ADJ_EN);
 
-	if (mmc_doing_retune(mmc))
+	if (mmc_doing_retune(mmc)) {
+		regmap_read(host->regmap, host->data->adjust, &val);
 		dly = FIELD_GET(ADJUST_ADJ_DELAY_MASK, val) + 1;
-	else
+	} else {
 		dly = 0;
+	}
 
 	for (i = 0; i < max_dly; i++) {
-		val &= ~ADJUST_ADJ_DELAY_MASK;
-		val |= FIELD_PREP(ADJUST_ADJ_DELAY_MASK, (dly + i) % max_dly);
-		writel(val, host->regs + host->data->adjust);
+		regmap_update_bits(host->regmap, host->data->adjust,
+				   ADJUST_ADJ_DELAY_MASK,
+				   FIELD_PREP(ADJUST_ADJ_DELAY_MASK,
+					      (dly + i) % max_dly));
 
 		ret = mmc_send_tuning(mmc, opcode, NULL);
 		if (!ret) {
@@ -636,10 +619,8 @@ static void meson_mmc_set_ios(struct mmc_host *mmc, struct mmc_ios *ios)
 		bus_width = CFG_BUS_WIDTH_4;
 	}
 
-	val = readl(host->regs + SD_EMMC_CFG);
-	val &= ~CFG_BUS_WIDTH_MASK;
-	val |= FIELD_PREP(CFG_BUS_WIDTH_MASK, bus_width);
-	writel(val, host->regs + SD_EMMC_CFG);
+	regmap_update_bits(host->regmap, SD_EMMC_CFG, CFG_BUS_WIDTH_MASK,
+			   FIELD_PREP(CFG_BUS_WIDTH_MASK, bus_width));
 
 	meson_mmc_check_resampling(host, ios);
 	err = meson_mmc_prepare_ios_clock(host, ios);
@@ -665,7 +646,7 @@ static void meson_mmc_set_blksz(struct mmc_host *mmc, unsigned int blksz)
 	struct meson_host *host = mmc_priv(mmc);
 	u32 cfg, blksz_old;
 
-	cfg = readl(host->regs + SD_EMMC_CFG);
+	regmap_read(host->regmap, SD_EMMC_CFG, &cfg);
 	blksz_old = FIELD_GET(CFG_BLK_LEN_MASK, cfg);
 
 	if (!is_power_of_2(blksz))
@@ -680,9 +661,8 @@ static void meson_mmc_set_blksz(struct mmc_host *mmc, unsigned int blksz)
 	dev_dbg(host->dev, "%s: update blk_len %d -> %d\n", __func__,
 		blksz_old, blksz);
 
-	cfg &= ~CFG_BLK_LEN_MASK;
-	cfg |= FIELD_PREP(CFG_BLK_LEN_MASK, blksz);
-	writel(cfg, host->regs + SD_EMMC_CFG);
+	regmap_update_bits(host->regmap, SD_EMMC_CFG, CFG_BLK_LEN_MASK,
+			   FIELD_PREP(CFG_BLK_LEN_MASK, blksz));
 }
 
 static void meson_mmc_set_response_bits(struct mmc_command *cmd, u32 *cmd_cfg)
@@ -708,7 +688,6 @@ static void meson_mmc_desc_chain_transfer(struct mmc_host *mmc, u32 cmd_cfg)
 	struct sd_emmc_desc *desc = host->descs;
 	struct mmc_data *data = host->cmd->data;
 	struct scatterlist *sg;
-	u32 start;
 	int i;
 
 	if (data->flags & MMC_DATA_WRITE)
@@ -736,8 +715,8 @@ static void meson_mmc_desc_chain_transfer(struct mmc_host *mmc, u32 cmd_cfg)
 	desc[data->sg_count - 1].cmd_cfg |= CMD_CFG_END_OF_CHAIN;
 
 	dma_wmb(); /* ensure descriptor is written before kicked */
-	start = host->descs_dma_addr | START_DESC_BUSY;
-	writel(start, host->regs + SD_EMMC_START);
+	regmap_write(host->regmap, SD_EMMC_START,
+		     host->descs_dma_addr | START_DESC_BUSY);
 }
 
 /* local sg copy for dram_access_quirk */
@@ -758,28 +737,19 @@ static void meson_mmc_copy_buffer(struct meson_host *host, struct mmc_data *data
 	sg_miter_start(&miter, sgl, nents, sg_flags);
 
 	while ((offset < buflen) && sg_miter_next(&miter)) {
-		unsigned int buf_offset = 0;
-		unsigned int len, left;
 		u32 *buf = miter.addr;
+		unsigned int len;
 
-		len = min(miter.length, buflen - offset);
-		left = len;
-
-		if (to_buffer) {
-			do {
-				writel(*buf++, host->bounce_iomem_buf + offset + buf_offset);
-
-				buf_offset += 4;
-				left -= 4;
-			} while (left);
-		} else {
-			do {
-				*buf++ = readl(host->bounce_iomem_buf + offset + buf_offset);
+		len = min(miter.length, buflen - offset) / sizeof(u32);
 
-				buf_offset += 4;
-				left -= 4;
-			} while (left);
-		}
+		if (to_buffer)
+			regmap_bulk_write(host->regmap,
+					  SD_EMMC_SRAM_DATA_BUF_OFF + offset,
+					  buf, len);
+		else
+			regmap_bulk_read(host->regmap,
+					 SD_EMMC_SRAM_DATA_BUF_OFF + offset,
+					 buf, len);
 
 		offset += len;
 	}
@@ -845,11 +815,11 @@ static void meson_mmc_start_cmd(struct mmc_host *mmc, struct mmc_command *cmd)
 
 	/* Last descriptor */
 	cmd_cfg |= CMD_CFG_END_OF_CHAIN;
-	writel(cmd_cfg, host->regs + SD_EMMC_CMD_CFG);
-	writel(cmd_data, host->regs + SD_EMMC_CMD_DAT);
-	writel(0, host->regs + SD_EMMC_CMD_RSP);
+	regmap_write(host->regmap, SD_EMMC_CMD_CFG, cmd_cfg);
+	regmap_write(host->regmap, SD_EMMC_CMD_DAT, cmd_data);
+	regmap_write(host->regmap, SD_EMMC_CMD_RSP, 0);
 	wmb(); /* ensure descriptor is written before kicked */
-	writel(cmd->arg, host->regs + SD_EMMC_CMD_ARG);
+	regmap_write(host->regmap, SD_EMMC_CMD_ARG, cmd->arg);
 }
 
 static int meson_mmc_validate_dram_access(struct mmc_host *mmc, struct mmc_data *data)
@@ -899,7 +869,7 @@ static void meson_mmc_request(struct mmc_host *mmc, struct mmc_request *mrq)
 		meson_mmc_pre_req(mmc, mrq);
 
 	/* Stop execution */
-	writel(0, host->regs + SD_EMMC_START);
+	regmap_write(host->regmap, SD_EMMC_START, 0);
 
 	meson_mmc_start_cmd(mmc, mrq->sbc ?: mrq->cmd);
 }
@@ -909,12 +879,12 @@ static void meson_mmc_read_resp(struct mmc_host *mmc, struct mmc_command *cmd)
 	struct meson_host *host = mmc_priv(mmc);
 
 	if (cmd->flags & MMC_RSP_136) {
-		cmd->resp[0] = readl(host->regs + SD_EMMC_CMD_RSP3);
-		cmd->resp[1] = readl(host->regs + SD_EMMC_CMD_RSP2);
-		cmd->resp[2] = readl(host->regs + SD_EMMC_CMD_RSP1);
-		cmd->resp[3] = readl(host->regs + SD_EMMC_CMD_RSP);
+		regmap_read(host->regmap, SD_EMMC_CMD_RSP3, &cmd->resp[0]);
+		regmap_read(host->regmap, SD_EMMC_CMD_RSP2, &cmd->resp[1]);
+		regmap_read(host->regmap, SD_EMMC_CMD_RSP1, &cmd->resp[2]);
+		regmap_read(host->regmap, SD_EMMC_CMD_RSP, &cmd->resp[3]);
 	} else if (cmd->flags & MMC_RSP_PRESENT) {
-		cmd->resp[0] = readl(host->regs + SD_EMMC_CMD_RSP);
+		regmap_read(host->regmap, SD_EMMC_CMD_RSP, &cmd->resp[0]);
 	}
 }
 
@@ -925,7 +895,7 @@ static void __meson_mmc_enable_sdio_irq(struct mmc_host *mmc, int enable)
 
 	if (enable)
 		reg_irqen |= IRQ_SDIO;
-	writel(reg_irqen, host->regs + SD_EMMC_IRQ_EN);
+	regmap_write(host->regmap, SD_EMMC_IRQ_EN, reg_irqen);
 }
 
 static irqreturn_t meson_mmc_irq(int irq, void *dev_id)
@@ -937,7 +907,8 @@ static irqreturn_t meson_mmc_irq(int irq, void *dev_id)
 
 	if (host->mmc->caps & MMC_CAP_SDIO_IRQ)
 		irq_mask |= IRQ_SDIO;
-	raw_status = readl(host->regs + SD_EMMC_STATUS);
+
+	regmap_read(host->regmap, SD_EMMC_STATUS, &raw_status);
 	status = raw_status & irq_mask;
 
 	if (!status) {
@@ -948,7 +919,7 @@ static irqreturn_t meson_mmc_irq(int irq, void *dev_id)
 	}
 
 	/* ack all raised interrupts */
-	writel(status, host->regs + SD_EMMC_STATUS);
+	regmap_write(host->regmap, SD_EMMC_STATUS, status);
 
 	cmd = host->cmd;
 
@@ -992,13 +963,9 @@ static irqreturn_t meson_mmc_irq(int irq, void *dev_id)
 	}
 
 out:
-	if (cmd->error) {
+	if (cmd->error)
 		/* Stop desc in case of errors */
-		u32 start = readl(host->regs + SD_EMMC_START);
-
-		start &= ~START_DESC_BUSY;
-		writel(start, host->regs + SD_EMMC_START);
-	}
+		regmap_clear_bits(host->regmap, SD_EMMC_START, START_DESC_BUSY);
 
 	return ret;
 }
@@ -1015,9 +982,9 @@ static int meson_mmc_wait_desc_stop(struct meson_host *host)
 	 * IRQs after we have called mmc_request_done() which is bad.
 	 */
 
-	return readl_poll_timeout(host->regs + SD_EMMC_STATUS, status,
-				  !(status & (STATUS_BUSY | STATUS_DESC_BUSY)),
-				  100, 5000);
+	return regmap_read_poll_timeout(host->regmap, SD_EMMC_STATUS, status,
+					!(status & (STATUS_BUSY | STATUS_DESC_BUSY)),
+					100, 5000);
 }
 
 static irqreturn_t meson_mmc_irq_thread(int irq, void *dev_id)
@@ -1069,7 +1036,7 @@ static void meson_mmc_cfg_init(struct meson_host *host)
 	/* abort chain on R/W errors */
 	cfg |= CFG_ERR_ABORT;
 
-	writel(cfg, host->regs + SD_EMMC_CFG);
+	regmap_write(host->regmap, SD_EMMC_CFG, cfg);
 }
 
 static int meson_mmc_card_busy(struct mmc_host *mmc)
@@ -1077,7 +1044,7 @@ static int meson_mmc_card_busy(struct mmc_host *mmc)
 	struct meson_host *host = mmc_priv(mmc);
 	u32 regval;
 
-	regval = readl(host->regs + SD_EMMC_STATUS);
+	regmap_read(host->regmap, SD_EMMC_STATUS, &regval);
 
 	/* We are only interrested in lines 0 to 3, so mask the other ones */
 	return !(FIELD_GET(STATUS_DATI, regval) & 0xf);
@@ -1135,12 +1102,20 @@ static const struct mmc_host_ops meson_mmc_ops = {
 	.ack_sdio_irq	= meson_mmc_ack_sdio_irq,
 };
 
+static const struct regmap_config meson_gx_mmc_regmap_config = {
+	.reg_bits = 16,
+	.val_bits = 32,
+	.reg_stride = 4,
+	.max_register = 0x7ff,
+};
+
 static int meson_mmc_probe(struct platform_device *pdev)
 {
 	struct resource *res;
 	struct meson_host *host;
 	struct mmc_host *mmc;
 	struct clk *core_clk;
+	void __iomem *regs;
 	int cd_irq, ret;
 
 	mmc = devm_mmc_alloc_host(&pdev->dev, sizeof(struct meson_host));
@@ -1177,9 +1152,9 @@ static int meson_mmc_probe(struct platform_device *pdev)
 	if (ret)
 		return dev_err_probe(&pdev->dev, ret, "device reset failed\n");
 
-	host->regs = devm_platform_get_and_ioremap_resource(pdev, 0, &res);
-	if (IS_ERR(host->regs))
-		return PTR_ERR(host->regs);
+	regs = devm_platform_get_and_ioremap_resource(pdev, 0, &res);
+	if (IS_ERR(regs))
+		return PTR_ERR(regs);
 
 	host->irq = platform_get_irq(pdev, 0);
 	if (host->irq < 0)
@@ -1204,7 +1179,12 @@ static int meson_mmc_probe(struct platform_device *pdev)
 	if (IS_ERR(core_clk))
 		return PTR_ERR(core_clk);
 
-	ret = meson_mmc_clk_init(host);
+	host->regmap = devm_regmap_init_mmio(&pdev->dev, regs,
+					     &meson_gx_mmc_regmap_config);
+	if (IS_ERR(host->regmap))
+		return PTR_ERR(host->regmap);
+
+	ret = meson_mmc_clk_init(host, regs);
 	if (ret)
 		return ret;
 
@@ -1212,12 +1192,12 @@ static int meson_mmc_probe(struct platform_device *pdev)
 	meson_mmc_cfg_init(host);
 
 	/* Stop execution */
-	writel(0, host->regs + SD_EMMC_START);
+	regmap_write(host->regmap, SD_EMMC_START, 0);
 
 	/* clear, ack and enable interrupts */
-	writel(0, host->regs + SD_EMMC_IRQ_EN);
-	writel(IRQ_EN_MASK, host->regs + SD_EMMC_STATUS);
-	writel(IRQ_EN_MASK, host->regs + SD_EMMC_IRQ_EN);
+	regmap_write(host->regmap, SD_EMMC_IRQ_EN, 0);
+	regmap_write(host->regmap, SD_EMMC_STATUS, IRQ_EN_MASK);
+	regmap_write(host->regmap, SD_EMMC_IRQ_EN, IRQ_EN_MASK);
 
 	ret = request_threaded_irq(host->irq, meson_mmc_irq,
 				   meson_mmc_irq_thread, IRQF_ONESHOT,
@@ -1256,7 +1236,6 @@ static int meson_mmc_probe(struct platform_device *pdev)
 		 * instead of the DDR memory
 		 */
 		host->bounce_buf_size = SD_EMMC_SRAM_DATA_BUF_LEN;
-		host->bounce_iomem_buf = host->regs + SD_EMMC_SRAM_DATA_BUF_OFF;
 		host->bounce_dma_addr = res->start + SD_EMMC_SRAM_DATA_BUF_OFF;
 	} else {
 		/* data bounce buffer */
@@ -1300,7 +1279,7 @@ static void meson_mmc_remove(struct platform_device *pdev)
 	mmc_remove_host(host->mmc);
 
 	/* disable interrupts */
-	writel(0, host->regs + SD_EMMC_IRQ_EN);
+	regmap_write(host->regmap, SD_EMMC_IRQ_EN, 0);
 	free_irq(host->irq, host);
 
 	clk_disable_unprepare(host->mmc_clk);
-- 
2.43.0

