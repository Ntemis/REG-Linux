From 0f16162149ceadd8dbd797fb39b992dc4dcb5caf Mon Sep 17 00:00:00 2001
From: Han Gao <gaohan@iscas.ac.cn>
Date: Sun, 1 Sep 2024 00:54:37 +0800
Subject: [PATCH 217/400] DPU: support DSI/HDMI driver for light-a-val

Signed-off-by: Han Gao <gaohan@iscas.ac.cn>
---
 arch/riscv/boot/dts/thead/th1520-a-val.dtsi   |  85 +++++
 arch/riscv/configs/th1520_defconfig           |   1 +
 drivers/gpu/drm/panel/panel-ilitek-ili9881c.c | 292 ++++++++++++++++--
 3 files changed, 360 insertions(+), 18 deletions(-)

diff --git a/arch/riscv/boot/dts/thead/th1520-a-val.dtsi b/arch/riscv/boot/dts/thead/th1520-a-val.dtsi
index cbc228a71cb9..8f144983fcfc 100644
--- a/arch/riscv/boot/dts/thead/th1520-a-val.dtsi
+++ b/arch/riscv/boot/dts/thead/th1520-a-val.dtsi
@@ -74,6 +74,13 @@ chosen {
 		stdout-path = "serial0:115200n8";
 	};
 
+	lcd0_backlight: pwm-backlight@0 {
+		compatible = "pwm-backlight";
+		pwms = <&pwm 0 5000000 0>;
+		brightness-levels = <0 4 8 16 32 64 128 255>;
+		default-brightness-level = <7>;
+	};
+
 	reg_lcd0_vdd18: regulator-lcd0-vdd18 {
 		compatible = "regulator-fixed";
 		regulator-name = "lcd0_en";
@@ -3082,6 +3089,84 @@ opp-1000000000 {
 	};
 };
 
+&dpu_enc1 {
+	ports {
+		/delete-node/ port@0;
+	};
+};
+
+&disp1_out {
+	remote-endpoint = <&hdmi_tx_in>;
+};
+
+&hdmi_tx {
+	status = "okay";
+
+	port@0 {
+		/* input */
+		hdmi_tx_in: endpoint {
+			remote-endpoint = <&disp1_out>;
+		};
+	};
+};
+
+&dpu_enc0 {
+	status = "okay";
+
+	ports {
+		/* output */
+		port@1 {
+			reg = <1>;
+
+			enc0_out: endpoint {
+				remote-endpoint = <&dsi0_in>;
+			};
+		};
+	};
+};
+
+&dhost_0 {
+	ports {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		port@0 {
+			reg = <0>;
+
+			dsi0_in: endpoint {
+				remote-endpoint = <&enc0_out>;
+			};
+		};
+
+		port@1 {
+			reg = <1>;
+
+			dsi0_out: endpoint {
+				remote-endpoint = <&panel0_in>;
+			};
+		};
+	};
+
+	panel0@0 {
+		compatible = "txd,dy800qwxpab";
+		reg = <0>;
+		backlight = <&lcd0_backlight>;
+		reset-gpio = <&gpio1 5 1>; /* active low */
+		vdd-supply = <&reg_lcd0_vdd18>;
+		vspn-supply = <&reg_lcd0_5v7>;
+
+		port {
+			panel0_in: endpoint {
+				remote-endpoint = <&dsi0_out>;
+			};
+		};
+	};
+};
+
+&dsi0 {
+	status = "okay";
+};
+
 &eip_28 {
 	status = "okay";
 };
diff --git a/arch/riscv/configs/th1520_defconfig b/arch/riscv/configs/th1520_defconfig
index bcdea7def01e..5d33f69fe015 100644
--- a/arch/riscv/configs/th1520_defconfig
+++ b/arch/riscv/configs/th1520_defconfig
@@ -147,6 +147,7 @@ CONFIG_REGULATOR_FIXED_VOLTAGE=y
 CONFIG_DRM=y
 CONFIG_DRM_PANEL_SIMPLE=y
 CONFIG_DRM_PANEL_JADARD_JD9365DA_H3=y
+CONFIG_DRM_PANEL_ILITEK_ILI9881C=y
 CONFIG_DRM_VERISILICON=y
 CONFIG_FB=y
 CONFIG_BACKLIGHT_CLASS_DEVICE=y
diff --git a/drivers/gpu/drm/panel/panel-ilitek-ili9881c.c b/drivers/gpu/drm/panel/panel-ilitek-ili9881c.c
index bb201f848ae9..7ff17466febe 100644
--- a/drivers/gpu/drm/panel/panel-ilitek-ili9881c.c
+++ b/drivers/gpu/drm/panel/panel-ilitek-ili9881c.c
@@ -49,9 +49,11 @@ struct ili9881c {
 	struct mipi_dsi_device	*dsi;
 	const struct ili9881c_desc	*desc;
 
-	struct regulator	*power;
 	struct gpio_desc	*reset;
 
+	struct regulator_bulk_data *supplies;
+	unsigned int num_supplies;
+
 	enum drm_panel_orientation	orientation;
 };
 
@@ -74,6 +76,30 @@ struct ili9881c {
 		},					\
 	}
 
+static const char * const ili9881c_supplies[] = {
+	"vdd",
+	"vspn",
+};
+
+static int ili9881c_init_regulators(struct ili9881c *ctx)
+{
+	int i;
+	struct device *dev = &ctx->dsi->dev;
+
+	ctx->num_supplies = ARRAY_SIZE(ili9881c_supplies);
+	ctx->supplies = devm_kzalloc(dev,
+				ctx->num_supplies * sizeof(*ctx->supplies),
+				GFP_KERNEL);
+
+	if (!ctx->supplies)
+		return -ENOMEM;
+
+	for (i = 0; i < ctx->num_supplies; i++)
+		ctx->supplies[i].supply = ili9881c_supplies[i];
+
+	return devm_regulator_bulk_get(dev, ctx->num_supplies, ctx->supplies);
+}
+
 static const struct ili9881c_instr lhr050h41_init[] = {
 	ILI9881C_SWITCH_PAGE_INSTR(3),
 	ILI9881C_COMMAND_INSTR(0x01, 0x00),
@@ -830,6 +856,202 @@ static const struct ili9881c_instr w552946ab_init[] = {
 	ILI9881C_SWITCH_PAGE_INSTR(0),
 };
 
+static const struct ili9881c_instr txd_dy800qwxpab_init[] = {
+	ILI9881C_SWITCH_PAGE_INSTR(3),
+	ILI9881C_COMMAND_INSTR(0x01, 0x00),
+	ILI9881C_COMMAND_INSTR(0x02, 0x00),
+	ILI9881C_COMMAND_INSTR(0x03, 0x53),
+	ILI9881C_COMMAND_INSTR(0x04, 0x53),
+	ILI9881C_COMMAND_INSTR(0x05, 0x13),
+	ILI9881C_COMMAND_INSTR(0x06, 0x04),
+	ILI9881C_COMMAND_INSTR(0x07, 0x02),
+	ILI9881C_COMMAND_INSTR(0x08, 0x02),
+	ILI9881C_COMMAND_INSTR(0x09, 0x00),
+	ILI9881C_COMMAND_INSTR(0x0A, 0x00),
+	ILI9881C_COMMAND_INSTR(0x0B, 0x00),
+	ILI9881C_COMMAND_INSTR(0x0C, 0x00),
+	ILI9881C_COMMAND_INSTR(0x0D, 0x00),
+	ILI9881C_COMMAND_INSTR(0x0E, 0x00),
+	ILI9881C_COMMAND_INSTR(0x0F, 0x00),
+	ILI9881C_COMMAND_INSTR(0x10, 0x00),
+	ILI9881C_COMMAND_INSTR(0x11, 0x00),
+	ILI9881C_COMMAND_INSTR(0x12, 0x00),
+	ILI9881C_COMMAND_INSTR(0x13, 0x00),
+	ILI9881C_COMMAND_INSTR(0x14, 0x00),
+	ILI9881C_COMMAND_INSTR(0x15, 0x00),
+	ILI9881C_COMMAND_INSTR(0x16, 0x00),
+	ILI9881C_COMMAND_INSTR(0x17, 0x00),
+	ILI9881C_COMMAND_INSTR(0x18, 0x00),
+	ILI9881C_COMMAND_INSTR(0x19, 0x00),
+	ILI9881C_COMMAND_INSTR(0x1A, 0x00),
+	ILI9881C_COMMAND_INSTR(0x1B, 0x00),
+	ILI9881C_COMMAND_INSTR(0x1C, 0x00),
+	ILI9881C_COMMAND_INSTR(0x1D, 0x00),
+	ILI9881C_COMMAND_INSTR(0x1E, 0xC0),
+	ILI9881C_COMMAND_INSTR(0x1F, 0x80),
+	ILI9881C_COMMAND_INSTR(0x20, 0x02),
+	ILI9881C_COMMAND_INSTR(0x21, 0x09),
+	ILI9881C_COMMAND_INSTR(0x22, 0x00),
+	ILI9881C_COMMAND_INSTR(0x23, 0x00),
+	ILI9881C_COMMAND_INSTR(0x24, 0x00),
+	ILI9881C_COMMAND_INSTR(0x25, 0x00),
+	ILI9881C_COMMAND_INSTR(0x26, 0x00),
+	ILI9881C_COMMAND_INSTR(0x27, 0x00),
+	ILI9881C_COMMAND_INSTR(0x28, 0x55),
+	ILI9881C_COMMAND_INSTR(0x29, 0x03),
+	ILI9881C_COMMAND_INSTR(0x2A, 0x00),
+	ILI9881C_COMMAND_INSTR(0x2B, 0x00),
+	ILI9881C_COMMAND_INSTR(0x2C, 0x00),
+	ILI9881C_COMMAND_INSTR(0x2D, 0x00),
+	ILI9881C_COMMAND_INSTR(0x2E, 0x00),
+	ILI9881C_COMMAND_INSTR(0x2F, 0x00),
+	ILI9881C_COMMAND_INSTR(0x30, 0x00),
+	ILI9881C_COMMAND_INSTR(0x31, 0x00),
+	ILI9881C_COMMAND_INSTR(0x32, 0x00),
+	ILI9881C_COMMAND_INSTR(0x33, 0x00),
+	ILI9881C_COMMAND_INSTR(0x34, 0x00), /* GPWR1/2 non overlap time 2.62us */
+	ILI9881C_COMMAND_INSTR(0x35, 0x00),
+	ILI9881C_COMMAND_INSTR(0x36, 0x00),
+	ILI9881C_COMMAND_INSTR(0x37, 0x00),
+	ILI9881C_COMMAND_INSTR(0x38, 0x3C),
+	ILI9881C_COMMAND_INSTR(0x39, 0x00),
+	ILI9881C_COMMAND_INSTR(0x3A, 0x00),
+	ILI9881C_COMMAND_INSTR(0x3B, 0x00),
+	ILI9881C_COMMAND_INSTR(0x3C, 0x00),
+	ILI9881C_COMMAND_INSTR(0x3D, 0x00),
+	ILI9881C_COMMAND_INSTR(0x3E, 0x00),
+	ILI9881C_COMMAND_INSTR(0x3F, 0x00),
+	ILI9881C_COMMAND_INSTR(0x40, 0x00),
+	ILI9881C_COMMAND_INSTR(0x41, 0x00),
+	ILI9881C_COMMAND_INSTR(0x42, 0x00),
+	ILI9881C_COMMAND_INSTR(0x43, 0x00),
+	ILI9881C_COMMAND_INSTR(0x44, 0x00),
+	ILI9881C_COMMAND_INSTR(0x50, 0x01),
+	ILI9881C_COMMAND_INSTR(0x51, 0x23),
+	ILI9881C_COMMAND_INSTR(0x52, 0x45),
+	ILI9881C_COMMAND_INSTR(0x53, 0x67),
+	ILI9881C_COMMAND_INSTR(0x54, 0x89),
+	ILI9881C_COMMAND_INSTR(0x55, 0xAB),
+	ILI9881C_COMMAND_INSTR(0x56, 0x01),
+	ILI9881C_COMMAND_INSTR(0x57, 0x23),
+	ILI9881C_COMMAND_INSTR(0x58, 0x45),
+	ILI9881C_COMMAND_INSTR(0x59, 0x67),
+	ILI9881C_COMMAND_INSTR(0x5A, 0x89),
+	ILI9881C_COMMAND_INSTR(0x5B, 0xAB),
+	ILI9881C_COMMAND_INSTR(0x5C, 0xCD),
+	ILI9881C_COMMAND_INSTR(0x5D, 0xEF),
+	ILI9881C_COMMAND_INSTR(0x5E, 0x01),
+	ILI9881C_COMMAND_INSTR(0x5F, 0x08),
+	ILI9881C_COMMAND_INSTR(0x60, 0x02),
+	ILI9881C_COMMAND_INSTR(0x61, 0x02),
+	ILI9881C_COMMAND_INSTR(0x62, 0x0A),
+	ILI9881C_COMMAND_INSTR(0x63, 0x15),
+	ILI9881C_COMMAND_INSTR(0x64, 0x14),
+	ILI9881C_COMMAND_INSTR(0x65, 0x02),
+	ILI9881C_COMMAND_INSTR(0x66, 0x11),
+	ILI9881C_COMMAND_INSTR(0x67, 0x10),
+	ILI9881C_COMMAND_INSTR(0x68, 0x02),
+	ILI9881C_COMMAND_INSTR(0x69, 0x0F),
+	ILI9881C_COMMAND_INSTR(0x6A, 0x0E),
+	ILI9881C_COMMAND_INSTR(0x6B, 0x02),
+	ILI9881C_COMMAND_INSTR(0x6C, 0x0D),
+	ILI9881C_COMMAND_INSTR(0x6D, 0x0C),
+	ILI9881C_COMMAND_INSTR(0x6E, 0x06),
+	ILI9881C_COMMAND_INSTR(0x6F, 0x02),
+	ILI9881C_COMMAND_INSTR(0x70, 0x02),
+	ILI9881C_COMMAND_INSTR(0x71, 0x02),
+	ILI9881C_COMMAND_INSTR(0x72, 0x02),
+	ILI9881C_COMMAND_INSTR(0x73, 0x02),
+	ILI9881C_COMMAND_INSTR(0x74, 0x02),
+	ILI9881C_COMMAND_INSTR(0x75, 0x06),
+	ILI9881C_COMMAND_INSTR(0x76, 0x02),
+	ILI9881C_COMMAND_INSTR(0x77, 0x02),
+	ILI9881C_COMMAND_INSTR(0x78, 0x0A),
+	ILI9881C_COMMAND_INSTR(0x79, 0x15),
+	ILI9881C_COMMAND_INSTR(0x7A, 0x14),
+	ILI9881C_COMMAND_INSTR(0x7B, 0x02),
+	ILI9881C_COMMAND_INSTR(0x7C, 0x10),
+	ILI9881C_COMMAND_INSTR(0x7D, 0x11),
+	ILI9881C_COMMAND_INSTR(0x7E, 0x02),
+	ILI9881C_COMMAND_INSTR(0x7F, 0x0C),
+	ILI9881C_COMMAND_INSTR(0x80, 0x0D),
+	ILI9881C_COMMAND_INSTR(0x81, 0x02),
+	ILI9881C_COMMAND_INSTR(0x82, 0x0E),
+	ILI9881C_COMMAND_INSTR(0x83, 0x0F),
+	ILI9881C_COMMAND_INSTR(0x84, 0x08),
+	ILI9881C_COMMAND_INSTR(0x85, 0x02),
+	ILI9881C_COMMAND_INSTR(0x86, 0x02),
+	ILI9881C_COMMAND_INSTR(0x87, 0x02),
+	ILI9881C_COMMAND_INSTR(0x88, 0x02),
+	ILI9881C_COMMAND_INSTR(0x89, 0x02),
+	ILI9881C_COMMAND_INSTR(0x8A, 0x02),
+	ILI9881C_SWITCH_PAGE_INSTR(4),
+	ILI9881C_COMMAND_INSTR(0x6C, 0x15), /* Set VCORE voltage = 1.5V */
+	ILI9881C_COMMAND_INSTR(0x6E, 0x30), /* di_pwr_reg=0 for power mode 2A, VGH clamp 18V */
+	ILI9881C_COMMAND_INSTR(0x6F, 0x47), /* pumping ratio VGH=5x VGL=-3x */
+	ILI9881C_COMMAND_INSTR(0x8D, 0x1F), /* VGL clamp -10V */
+	ILI9881C_COMMAND_INSTR(0x87, 0xBA), /* ESD */
+	ILI9881C_COMMAND_INSTR(0x26, 0x76),
+	ILI9881C_COMMAND_INSTR(0xB2, 0xD1),
+	ILI9881C_COMMAND_INSTR(0x35, 0x1F),
+	ILI9881C_COMMAND_INSTR(0x31, 0x75),
+	ILI9881C_COMMAND_INSTR(0x33, 0x14),
+	ILI9881C_COMMAND_INSTR(0x3A, 0xA9),
+	ILI9881C_COMMAND_INSTR(0x3B, 0x98),
+	ILI9881C_COMMAND_INSTR(0x38, 0x01),
+	ILI9881C_COMMAND_INSTR(0x39, 0x00),
+	ILI9881C_SWITCH_PAGE_INSTR(1),
+	ILI9881C_COMMAND_INSTR(0x22, 0x0A), /* BGR, SS */
+	ILI9881C_COMMAND_INSTR(0x31, 0x00), /* Zigzag type3 inversion */
+	ILI9881C_COMMAND_INSTR(0x50, 0xCF),
+	ILI9881C_COMMAND_INSTR(0x51, 0xCA),
+	ILI9881C_COMMAND_INSTR(0x53, 0x3C),
+	ILI9881C_COMMAND_INSTR(0x55, 0x3C),
+	ILI9881C_COMMAND_INSTR(0x60, 0x28),
+	ILI9881C_COMMAND_INSTR(0x2E, 0xC8),
+	ILI9881C_COMMAND_INSTR(0x34, 0x01),
+	ILI9881C_COMMAND_INSTR(0xA0, 0x00),
+	ILI9881C_COMMAND_INSTR(0xA1, 0x08), /* VP251 */
+	ILI9881C_COMMAND_INSTR(0xA2, 0x18), /* VP247 */
+	ILI9881C_COMMAND_INSTR(0xA3, 0x15), /* VP243 */
+	ILI9881C_COMMAND_INSTR(0xA4, 0x19), /* VP239 */
+	ILI9881C_COMMAND_INSTR(0xA5, 0x2D), /* VP231 */
+	ILI9881C_COMMAND_INSTR(0xA6, 0x21), /* VP219 */
+	ILI9881C_COMMAND_INSTR(0xA7, 0x23), /* VP203 */
+	ILI9881C_COMMAND_INSTR(0xA8, 0x74), /* VP175 */
+	ILI9881C_COMMAND_INSTR(0xA9, 0x1C), /* VP144 */
+	ILI9881C_COMMAND_INSTR(0xAA, 0x26), /* VP111 */
+	ILI9881C_COMMAND_INSTR(0xAB, 0x64), /* VP80 */
+	ILI9881C_COMMAND_INSTR(0xAC, 0x1A), /* VP52 */
+	ILI9881C_COMMAND_INSTR(0xAD, 0x1C), /* VP36 */
+	ILI9881C_COMMAND_INSTR(0xAE, 0x50), /* VP24 */
+	ILI9881C_COMMAND_INSTR(0xAF, 0x25), /* VP16 */
+	ILI9881C_COMMAND_INSTR(0xB0, 0x2A), /* VP12 */
+	ILI9881C_COMMAND_INSTR(0xB1, 0x4C), /* VP8 */
+	ILI9881C_COMMAND_INSTR(0xB2, 0x5D), /* VP4 */
+	ILI9881C_COMMAND_INSTR(0xB3, 0x23), /* VP0 */
+	ILI9881C_COMMAND_INSTR(0xC0, 0x00), /* VN255 GAMMA N */
+	ILI9881C_COMMAND_INSTR(0xC1, 0x1B), /* VN251 */
+	ILI9881C_COMMAND_INSTR(0xC2, 0x27), /* VN247 */
+	ILI9881C_COMMAND_INSTR(0xC3, 0x13), /* VN243 */
+	ILI9881C_COMMAND_INSTR(0xC4, 0x16), /* VN239 */
+	ILI9881C_COMMAND_INSTR(0xC5, 0x28), /* VN231 */
+	ILI9881C_COMMAND_INSTR(0xC6, 0x1E), /* VN219 */
+	ILI9881C_COMMAND_INSTR(0xC7, 0x20), /* VN203 */
+	ILI9881C_COMMAND_INSTR(0xC8, 0x7D), /* VN175 */
+	ILI9881C_COMMAND_INSTR(0xC9, 0x19), /* VN144 */
+	ILI9881C_COMMAND_INSTR(0xCA, 0x27), /* VN111 */
+	ILI9881C_COMMAND_INSTR(0xCB, 0x65), /* VN80 */
+	ILI9881C_COMMAND_INSTR(0xCC, 0x1D), /* VN52 */
+	ILI9881C_COMMAND_INSTR(0xCD, 0x1D), /* VN36 */
+	ILI9881C_COMMAND_INSTR(0xCE, 0x52), /* VN24 */
+	ILI9881C_COMMAND_INSTR(0xCF, 0x26), /* VN16 */
+	ILI9881C_COMMAND_INSTR(0xD0, 0x2C), /* VN12 */
+	ILI9881C_COMMAND_INSTR(0xD1, 0x4E), /* VN8 */
+	ILI9881C_COMMAND_INSTR(0xD2, 0x59), /* VN4 */
+	ILI9881C_COMMAND_INSTR(0xD3, 0x23), /* VN0 */
+};
+
 static inline struct ili9881c *panel_to_ili9881c(struct drm_panel *panel)
 {
 	return container_of(panel, struct ili9881c, panel);
@@ -873,11 +1095,10 @@ static int ili9881c_send_cmd_data(struct ili9881c *ctx, u8 cmd, u8 data)
 static int ili9881c_prepare(struct drm_panel *panel)
 {
 	struct ili9881c *ctx = panel_to_ili9881c(panel);
-	unsigned int i;
 	int ret;
 
 	/* Power the panel */
-	ret = regulator_enable(ctx->power);
+	ret = regulator_bulk_enable(ctx->num_supplies, ctx->supplies);
 	if (ret)
 		return ret;
 	msleep(5);
@@ -889,6 +1110,15 @@ static int ili9881c_prepare(struct drm_panel *panel)
 	gpiod_set_value_cansleep(ctx->reset, 0);
 	msleep(20);
 
+	return 0;
+}
+
+static int ili9881c_enable(struct drm_panel *panel)
+{
+	int ret;
+	unsigned int i;
+	struct ili9881c *ctx = panel_to_ili9881c(panel);
+
 	for (i = 0; i < ctx->desc->init_length; i++) {
 		const struct ili9881c_instr *instr = &ctx->desc->init[i];
 
@@ -914,13 +1144,6 @@ static int ili9881c_prepare(struct drm_panel *panel)
 	if (ret)
 		return ret;
 
-	return 0;
-}
-
-static int ili9881c_enable(struct drm_panel *panel)
-{
-	struct ili9881c *ctx = panel_to_ili9881c(panel);
-
 	msleep(120);
 
 	mipi_dsi_dcs_set_display_on(ctx->dsi);
@@ -930,18 +1153,24 @@ static int ili9881c_enable(struct drm_panel *panel)
 
 static int ili9881c_disable(struct drm_panel *panel)
 {
+	int ret;
 	struct ili9881c *ctx = panel_to_ili9881c(panel);
 
-	return mipi_dsi_dcs_set_display_off(ctx->dsi);
+	ret = mipi_dsi_dcs_set_display_off(ctx->dsi);
+	if (ret)
+		return ret;
+
+	msleep(10);
+
+	return mipi_dsi_dcs_enter_sleep_mode(ctx->dsi);
 }
 
 static int ili9881c_unprepare(struct drm_panel *panel)
 {
 	struct ili9881c *ctx = panel_to_ili9881c(panel);
 
-	mipi_dsi_dcs_enter_sleep_mode(ctx->dsi);
-	regulator_disable(ctx->power);
-	gpiod_set_value_cansleep(ctx->reset, 1);
+	regulator_bulk_disable(ctx->num_supplies, ctx->supplies);
+	gpiod_set_value(ctx->reset, 1);
 
 	return 0;
 }
@@ -1014,6 +1243,25 @@ static const struct drm_display_mode w552946aba_default_mode = {
 	.height_mm	= 121,
 };
 
+static const struct drm_display_mode txd_dy800qwxpab_default_mode = {
+	.clock		= 76000,
+
+	.hdisplay	= 800,
+	.hsync_start	= 800 + 60,
+	.hsync_end	= 800 + 60 + 40,
+	.htotal		= 800 + 60 + 40 + 60,
+
+	.vdisplay	= 1280,
+	.vsync_start	= 1280 + 16,
+	.vsync_end	= 1280 + 16 + 8,
+	.vtotal		= 1280 + 16 + 8 + 16,
+
+	.width_mm	= 107,
+	.height_mm	= 172,
+
+	.flags		= DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC,
+};
+
 static int ili9881c_get_modes(struct drm_panel *panel,
 			      struct drm_connector *connector)
 {
@@ -1077,10 +1325,9 @@ static int ili9881c_dsi_probe(struct mipi_dsi_device *dsi)
 	drm_panel_init(&ctx->panel, &dsi->dev, &ili9881c_funcs,
 		       DRM_MODE_CONNECTOR_DSI);
 
-	ctx->power = devm_regulator_get(&dsi->dev, "power");
-	if (IS_ERR(ctx->power))
-		return dev_err_probe(&dsi->dev, PTR_ERR(ctx->power),
-				     "Couldn't get our power regulator\n");
+	ret = ili9881c_init_regulators(ctx);
+	if (ret)
+		return ret;
 
 	ctx->reset = devm_gpiod_get_optional(&dsi->dev, "reset", GPIOD_OUT_LOW);
 	if (IS_ERR(ctx->reset))
@@ -1145,11 +1392,20 @@ static const struct ili9881c_desc w552946aba_desc = {
 		      MIPI_DSI_MODE_LPM | MIPI_DSI_MODE_NO_EOT_PACKET,
 };
 
+static const struct ili9881c_desc txd_dy800qwxpab_desc = {
+	.init = txd_dy800qwxpab_init,
+	.init_length = ARRAY_SIZE(txd_dy800qwxpab_init),
+	.mode = &txd_dy800qwxpab_default_mode,
+	.mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_BURST |
+		      MIPI_DSI_MODE_LPM,
+};
+
 static const struct of_device_id ili9881c_of_match[] = {
 	{ .compatible = "bananapi,lhr050h41", .data = &lhr050h41_desc },
 	{ .compatible = "feixin,k101-im2byl02", .data = &k101_im2byl02_desc },
 	{ .compatible = "tdo,tl050hdv35", .data = &tl050hdv35_desc },
 	{ .compatible = "wanchanglong,w552946aba", .data = &w552946aba_desc },
+	{ .compatible = "txd,dy800qwxpab", .data = &txd_dy800qwxpab_desc },
 	{ }
 };
 MODULE_DEVICE_TABLE(of, ili9881c_of_match);
-- 
2.43.0

