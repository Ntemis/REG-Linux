name: Build Toolchain and LLVM/CLANG/LIBCBC/MUSL

on:
  workflow_dispatch:

concurrency:
    group: ${{ github.repository }}-${{ github.workflow }}
    cancel-in-progress: true

permissions:
  contents: write
  actions: write

jobs:
  compile-llvm:
    name: Compile LLVM/CLANG/LIBCBC/MUSL
    runs-on: self-hosted
    outputs:
      llvmversion: ${{ steps.compile_llvm_step.outputs.llvmversion }}
      dorelease: ${{ steps.compile_llvm_step.outputs.dorelease }}
    strategy:
      matrix:
        cpu: [arm1176jzf_s, cortex_a7, cortex_a9, cortex_a15_a7, cortex_a17, cortex_a35, cortex_a53, cortex_a55, cortex_a72, cortex_a72_a53, cortex_a73_a53, cortex_a75_a55, cortex_a76, cortex_a76_a55, riscv, saphira, x86_64, x86_64_v3]
        include:
          # MUSL 32 bit
          - target: bcm2835
            cpu: arm1176jzf_s
          # arch: armhf-musl
          - target: h3
            cpu: cortex_a7
          # arch: armv7-musl
          - target: s812
            cpu: cortex_a9
          # arch: armv7-musl
          - target: odroidxu4
            cpu: cortex_a15_a7
          # arch: armv7-musl
          - target: rk3288
            cpu: cortex_a17
          # arch: armv7-musl
          # MUSL 64 bit
          - target: rk3326
            cpu: cortex_a35
          # arch: aarch64-musl
          - target: h616
            cpu: cortex_a53
          # arch: aarch64-musl
          # - target: jz4770
          #   cpu: jz4770
          #   arch: mips-musl
          # GLIBC
          - target: rk3568
            cpu: cortex_a55
          # arch: aarch64-glibc
          - target: bcm2711
            cpu: cortex_a72
          # arch: aarch64-glibc
          - target: rk3399
            cpu: cortex_a72_a53
          # arch: aarch64-glibc
          - target: s922x
            cpu: cortex_a73_a53
          # arch: aarch64-glibc
          - target: odin
            cpu: cortex_a75_a55
          # arch: aarch64-glibc
          - target: bcm2712
            cpu: cortex_a76
          # arch: aarch64-glibc
          - target: sm8250
            cpu: cortex_a76_a55
          # arch: aarch64-glibc
          - target: jh7110
            cpu: riscv
          # arch: riscv-glibc
          - target: asahi
            cpu: saphira
          # arch: asahi-glibc
          - target: x86_64
            cpu: x86_64
          # arch: x86_64-glibc
          - target: x86_64_v3
            cpu: x86_64_v3
          # arch: x86_64-glibc
      fail-fast: false

    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Clone repository
        id: clone_step
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          gh extension install actions/gh-actions-cache
          while [ -n "$(gh run list --workflow build-docker-image.yaml --json status --jq '.[] | select(.status == "queued" or .status == "in_progress") | .status')" ]; do
            echo "Waiting for build-docker-image.yaml to finish..."
            sleep 20
          done
          
          # Make sure it's a clean build
          cd ..
          rm -rf "${{ github.workspace }}"
          mkdir -p "${{ github.workspace }}"
          cd "${{ github.workspace }}"
          git clone --recurse-submodules --depth 1 --shallow-submodules "https://${{ github.repository_owner }}:${{ github.token }}@github.com/${{ github.repository }}.git" .
          git config --global --add safe.directory "${{ github.workspace }}"
          git config user.name "${{ github.repository_owner }}"
          git config user.email "${{ github.repository_owner }}@users.noreply.github.com"
          git config --local user.password ${{ github.token }}

      # hashFiles() will be always empty if it's in the same step of cloning
      - name: Compile LLVM
        id: compile_llvm_step
        env:
          GH_TOKEN: ${{ secrets.REG_TOKEN }}
        shell: bash
        run: |
          # Get LLVM version
          CUSTOM_DIR="$PWD/custom" BUILDROOT_DIR="$PWD/buildroot" "$PWD/scripts/linux/mergeToBR.sh"
          llvmversion="$(grep -m 1 LLVM_PROJECT_VERSION_MAJOR buildroot/package/llvm-project/llvm-project.mk | sed -e 's/.*=[ ]*//')$(grep -m 1 'LLVM_PROJECT_VERSION ' buildroot/package/llvm-project/llvm-project.mk | sed -e 's/.*)//')"
          echo "llvmversion=${llvmversion}"
          echo "llvmversion=${llvmversion}" >> "$GITHUB_OUTPUT"
          
          # Check if already released
          [ "$(curl -o /dev/null -s -Iw '%{http_code}' -L "https://github.com/REG-Linux/REG-llvm-binaries/releases/download/${llvmversion}/reglinux-llvm-${llvmversion}-${{ matrix.cpu }}.tar.xz")" -eq 200 ] && skipllvm=y
          [ "$(curl -o /dev/null -s -Iw '%{http_code}' -L "https://github.com/REG-Linux/REG-llvm-binaries/releases/download/${llvmversion}/reglinux-clang-${llvmversion}-${{ matrix.cpu }}.tar.xz")" -eq 200 ] && skipclang=y
          [ "$(curl -o /dev/null -s -Iw '%{http_code}' -L "https://github.com/REG-Linux/REG-llvm-binaries/releases/download/${llvmversion}/reglinux-libclc-${llvmversion}-${{ matrix.cpu }}.tar.xz")" -eq 200 ] && skiplibclc=y
          
          if [ -z "$skipllvm" ] || [ -z "$skipclang" ] || [ -z "$skiplibclc" ]; then
            # Patch Makefile to use 'reglinux-build:latest' docker image from ghcr.io
            sed -i '/^DOCKER_REPO/ s|reglinux|ghcr.io/reg-linux|' Makefile
            sed -i '/ build . -t /d' Makefile
            
            # Disable CCACHE
            sed -i '/BR2_CCACHE/d' configs/reglinux-board.common
            
            # After each package is installed, delete downloaded files
            sed -i '/stamp_installed\:/,/stamp_dircleaned\:/ s:^$:\trm -rfv "\$(\$(PKG)_DL_DIR)"\n:' buildroot/package/pkg-generic.mk
            
            # Temp fix for riscv64
            # sed -i 's/ -mabi=lp64d -mcpu=sifive-u74//' configs/reglinux-jh7110.board || :
            
            # Hack needed to retrieve the proper staging name directory when packaging
            sed -i '/stamp_staging_installed\:/,/stamp_images_installed\:/ s:^$:\techo "host/\$(GNU_TARGET_NAME)/sysroot" > "\$(BUILD_DIR)/staging.dir"\n:' buildroot/package/pkg-generic.mk
            
            # Enable the flag to build LLVM/CLANG/LIBCLC from source
            sed -i 's/#BR2_PACKAGE_LLVM_BUILD_FROM_SOURCE=y/BR2_PACKAGE_LLVM_BUILD_FROM_SOURCE=y/' configs/reglinux-board.common
            
            cacheHASHshort="${{ hashFiles('custom/package/*llvm*/**', '.gitmodules') }}"
            cacheHASHshort="${cacheHASHshort:0:7}"
            if curl -s -L "https://github.com/REG-Linux/REG-llvm-binaries/releases/download/toolchain-${{ matrix.cpu }}/toolchain-${{ matrix.cpu }}-${cacheHASHshort}.tar.xz" | tar -xJf - 2>/dev/null
            then
              echo "toolchain-${{ matrix.cpu }}-${cacheHASHshort}.tar.xz extracted"
            else
              echo "toolchain-${{ matrix.cpu }}-${cacheHASHshort}.tar.xz not found"
              [ "$(nproc)" -gt 7 ] && jobsandload="-j7" || jobsandload="-j$(( $(nproc) - 1 ))"
              # Build with 2 trials in case of download failure that sometimes happens
              PARALLEL_BUILD=n DEBUG_BUILD=n CCACHE_DISABLE=1 make ${jobsandload} PKG=alsa-lib ${{ matrix.target }}-pkg || {
                echo "Retrying build after failure..."
                sleep 60
                cd "${{ github.workspace }}"
                PARALLEL_BUILD=n DEBUG_BUILD=n CCACHE_DISABLE=1 make ${jobsandload} PKG=alsa-lib ${{ matrix.target }}-pkg
              }
              
              XZ_OPT=-9 tar --ignore-failed-read -cJf "toolchain-${{ matrix.cpu }}-${cacheHASHshort}.tar.xz" output/
              gh release delete toolchain-${{ matrix.cpu }} --cleanup-tag -y --repo REG-Linux/REG-llvm-binaries || :
              gh release create toolchain-${{ matrix.cpu }} --repo REG-Linux/REG-llvm-binaries --latest=false --title "Toolchain cache for ${{ matrix.cpu }} targets" "toolchain-${{ matrix.cpu }}-${cacheHASHshort}.tar.xz"
              echo "Toolchain cache created"
              rm "toolchain-${{ matrix.cpu }}-${cacheHASHshort}.tar.xz"
            fi
          fi
          
          if [ -z "$skiplibclc" ]; then
            [ "$(nproc)" -gt 7 ] && jobsandload="-j7" || jobsandload="-j$(( $(nproc) - 1 ))"
            # Build with 2 trials in case of download failure that sometimes happens
            PARALLEL_BUILD=n DEBUG_BUILD=n CCACHE_DISABLE=1 make ${jobsandload} PKG=libclc ${{ matrix.target }}-pkg || {
              echo "Retrying build after failure..."
              sleep 60
              cd "${{ github.workspace }}"
              PARALLEL_BUILD=n DEBUG_BUILD=n CCACHE_DISABLE=1 make ${jobsandload} PKG=libclc ${{ matrix.target }}-pkg
            }
          elif [ -z "$skipclang" ]; then
            [ "$(nproc)" -gt 7 ] && jobsandload="-j7" || jobsandload="-j$(( $(nproc) - 1 ))"
            # Build with 2 trials in case of download failure that sometimes happens
            PARALLEL_BUILD=n DEBUG_BUILD=n CCACHE_DISABLE=1 make ${jobsandload} PKG=clang ${{ matrix.target }}-pkg || {
              echo "Retrying build after failure..."
              sleep 60
              cd "${{ github.workspace }}"
              PARALLEL_BUILD=n DEBUG_BUILD=n CCACHE_DISABLE=1 make ${jobsandload} PKG=clang ${{ matrix.target }}-pkg
            }
          elif [ -z "$skipllvm" ]; then
            [ "$(nproc)" -gt 7 ] && jobsandload="-j7" || jobsandload="-j$(( $(nproc) - 1 ))"
            # Build with 2 trials in case of download failure that sometimes happens
            PARALLEL_BUILD=n DEBUG_BUILD=n CCACHE_DISABLE=1 make ${jobsandload} PKG=llvm ${{ matrix.target }}-pkg || {
              echo "Retrying build after failure..."
              sleep 60
              cd "${{ github.workspace }}"
              PARALLEL_BUILD=n DEBUG_BUILD=n CCACHE_DISABLE=1 make ${jobsandload} PKG=llvm ${{ matrix.target }}-pkg
            }
          fi
          
          # Create packages
          if [ -z "$skiplibclc" ]; then
            cd "${{ github.workspace }}/output/${{ matrix.target }}" || exit 1
            staging="$(<"${{ github.workspace }}/output/${{ matrix.target }}/build/staging.dir")"
            cat build/*libclc-*/.files-list-host.txt | cut -d ',' -f 2 | sed -e 's+^./+host/+g' >libclc-filelist.txt
            cat build/*libclc-*/.files-list-staging.txt | cut -d ',' -f 2 | sed -e "s+^./+${staging}/+g" >>libclc-filelist.txt
            cat build/*libclc-*/.files-list.txt | cut -d ',' -f 2 | sed -e 's+^./+target/+g' >>libclc-filelist.txt
            find host/ -type f -ipath '*libclc*' -or -ipath '*/clc/*' -or -iname 'prepare_builtins' >>libclc-filelist.txt
            find target/ -type f -ipath '*libclc*' -or -ipath '*/clc/*' -or -iname 'prepare_builtins' >>libclc-filelist.txt
            sort -o sorted-libclc-filelist.txt -u libclc-filelist.txt
            XZ_OPT=-9 tar -cJf "${{ github.workspace }}/reglinux-libclc-${llvmversion}-${{ matrix.cpu }}.tar.xz" --verbatim-files-from -T sorted-libclc-filelist.txt || :
            echo "dorelease=true" >> "$GITHUB_OUTPUT"
          fi
          if [ -z "$skipclang" ]; then
            cd "${{ github.workspace }}/output/${{ matrix.target }}" || exit 1
            staging="$(<"${{ github.workspace }}/output/${{ matrix.target }}/build/staging.dir")"
            cat build/*clang-*/.files-list-host.txt | cut -d ',' -f 2 | sed -e 's+^./+host/+g' >clang-filelist.txt
            cat build/*clang-*/.files-list-staging.txt | cut -d ',' -f 2 | sed -e "s+^./+${staging}/+g" >>clang-filelist.txt
            cat build/*clang-*/.files-list.txt | cut -d ',' -f 2 | sed -e 's+^./+target/+g' >>clang-filelist.txt
            find host/ -type f -ipath '*clang*' >>clang-filelist.txt
            find target/ -type f -ipath '*clang*' >>clang-filelist.txt
            sort -o sorted-clang-filelist.txt -u clang-filelist.txt
            XZ_OPT=-9 tar -cJf "${{ github.workspace }}/reglinux-clang-${llvmversion}-${{ matrix.cpu }}.tar.xz" --verbatim-files-from -T sorted-clang-filelist.txt || :
            echo "dorelease=true" >> "$GITHUB_OUTPUT"
          fi
          if [ -z "$skipllvm" ]; then
            cd "${{ github.workspace }}/output/${{ matrix.target }}" || exit 1
            staging="$(<"${{ github.workspace }}/output/${{ matrix.target }}/build/staging.dir")"
            cat build/*llvm-*/.files-list-host.txt | cut -d ',' -f 2 | sed -e 's+^./+host/+g' >llvm-filelist.txt
            cat build/*llvm-*/.files-list-staging.txt | cut -d ',' -f 2 | sed -e "s+^./+${staging}/+g" >>llvm-filelist.txt
            cat build/*llvm-*/.files-list.txt | cut -d ',' -f 2 | sed -e 's+^./+target/+g' >>llvm-filelist.txt
            find host/ -type f -ipath '*llvm*' >>llvm-filelist.txt
            find target/ -type f -ipath '*llvm*' >>llvm-filelist.txt
            sort -o sorted-llvm-filelist.txt -u llvm-filelist.txt
            XZ_OPT=-9 tar -cJf "${{ github.workspace }}/reglinux-llvm-${llvmversion}-${{ matrix.cpu }}.tar.xz" --verbatim-files-from -T sorted-llvm-filelist.txt || :
            echo "dorelease=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload artifacts
        if: ${{ steps.compile_llvm_step.outputs.dorelease == 'true' && ! cancelled() }}
        id: upload_artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reglinux-llvm-${{ steps.compile_llvm_step.outputs.llvmversion }}-${{ matrix.cpu }}
          compression-level: 0
          path: |
            reglinux-llvm-${{ steps.compile_llvm_step.outputs.llvmversion }}-*
            reglinux-clang-${{ steps.compile_llvm_step.outputs.llvmversion }}-*
            reglinux-libclc-${{ steps.compile_llvm_step.outputs.llvmversion }}-*

  create_release:
    name: Create release
    needs: compile-llvm
    if: ${{ needs.compile-llvm.outputs.dorelease == 'true' && ! cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: reglinux-llvm-${{ needs.compile-llvm.outputs.llvmversion }}-*
          path: ./
          merge-multiple: true
      - name: Create release
        uses: softprops/action-gh-release@master
        with:
          repository: REG-Linux/REG-llvm-binaries
          token: ${{ secrets.REG_TOKEN }}
          files: |
            reglinux-llvm-${{ needs.compile-llvm.outputs.llvmversion }}-*
            reglinux-clang-${{ needs.compile-llvm.outputs.llvmversion }}-*
            reglinux-libclc-${{ needs.compile-llvm.outputs.llvmversion }}-*
          tag_name: ${{ needs.compile-llvm.outputs.llvmversion }}
          prerelease: false
          make_latest: true
          generate_release_notes: true
          name: llvm/clang/libclc ${{ needs.compile-llvm.outputs.llvmversion }}
