diff --git a/package/llvm-project/clang/clang.mk b/package/llvm-project/clang/clang.mk
index 0bafd6461b..5fd9c2cf44 100644
--- a/package/llvm-project/clang/clang.mk
+++ b/package/llvm-project/clang/clang.mk
@@ -6,6 +6,9 @@
 
 CLANG_VERSION_MAJOR = $(LLVM_PROJECT_VERSION_MAJOR)
 CLANG_VERSION = $(LLVM_PROJECT_VERSION)
+
+ifeq ($(BR2_PACKAGE_LLVM_BUILD_FROM_SOURCE),y)
+
 CLANG_SITE = $(LLVM_PROJECT_SITE)
 CLANG_SOURCE = clang-$(CLANG_VERSION).src.tar.xz
 CLANG_LICENSE = Apache-2.0 with exceptions
@@ -45,15 +48,19 @@ CLANG_CONF_OPTS += -DCLANG_BUILD_TOOLS=ON
 HOST_CLANG_CONF_OPTS += \
 	-DCLANG_BUILD_EXAMPLES=OFF \
 	-DCLANG_INCLUDE_DOCS=OFF \
-	-DCLANG_INCLUDE_TESTS=OFF
+	-DCLANG_INCLUDE_TESTS=OFF \
+	-DLLVM_INCLUDE_TESTS=OFF
 
 CLANG_CONF_OPTS += \
 	-DCLANG_BUILD_EXAMPLES=OFF \
 	-DCLANG_INCLUDE_DOCS=OFF \
-	-DCLANG_INCLUDE_TESTS=OFF
+	-DCLANG_INCLUDE_TESTS=OFF \
+	-DLLVM_INCLUDE_TESTS=OFF
 
+# batocera - add LLVM_COMMON_CMAKE_UTILS
 HOST_CLANG_CONF_OPTS += -DLLVM_DIR=$(HOST_DIR)/lib/cmake/llvm \
-	-DCLANG_DEFAULT_LINKER=$(TARGET_LD)
+	-DCLANG_DEFAULT_LINKER=$(TARGET_LD) \
+	-DLLVM_COMMON_CMAKE_UTILS=$(HOST_DIR)/lib/cmake/llvm
 CLANG_CONF_OPTS += -DLLVM_DIR=$(STAGING_DIR)/usr/lib/cmake/llvm \
 	-DCMAKE_MODULE_PATH=$(HOST_DIR)/lib/cmake/llvm \
 	-DCLANG_TABLEGEN:FILEPATH=$(HOST_DIR)/bin/clang-tblgen \
@@ -80,6 +87,7 @@ CLANG_FILES_TO_REMOVE = \
 define CLANG_CLEANUP_TARGET
 	rm -rf $(addprefix $(TARGET_DIR),$(CLANG_FILES_TO_REMOVE))
 endef
+
 CLANG_POST_INSTALL_TARGET_HOOKS += CLANG_CLEANUP_TARGET
 
 # clang-tblgen is not installed by default, however it is necessary
@@ -135,3 +143,74 @@ HOST_CLANG_POST_INSTALL_HOOKS += HOST_CLANG_INSTALL_WRAPPER_AND_SIMPLE_SYMLINKS
 
 $(eval $(cmake-package))
 $(eval $(host-cmake-package))
+
+else
+
+# Download pre compiled files
+REGLINUX_CLANG_ARCH = unknown
+ifeq ($(BR2_arm),y)
+ifeq ($(BR2_arm1176jzf_s),y)
+    # bcm2835
+    REGLINUX_CLANG_ARCH = armhf
+else
+    # h3
+    REGLINUX_CLANG_ARCH = armv7
+endif
+else ifeq ($(BR2_aarch64),y)
+ifeq ($(BR2_saphira),y)
+    # Asahi Linux
+    REGLINUX_CLANG_ARCH = asahi
+else
+    # h5, Cortex A53
+    REGLINUX_CLANG_ARCH = aarch64
+endif
+else ifeq ($(BR2_RISCV_64),y)
+# jh7110, RISC-V 64 (rv64gc, aka imafd)
+REGLINUX_CLANG_ARCH = riscv64
+else ifeq ($(BR2_x86_64),y)
+# X86_64 architecture
+REGLINUX_CLANG_ARCH = x86_64
+endif
+
+CLANG_SITE = https://github.com/REG-Linux/REG-llvm-binaries/releases/download/$(CLANG_VERSION)
+CLANG_SOURCE = reglinux-clang-$(CLANG_VERSION)-$(REGLINUX_CLANG_ARCH).tar.xz
+HOST_CLANG_DEPENDENCIES = host-libxml2
+
+define RENAME_CLANG_HASH_IF_NOT_BUILD_FROM_SOURCE
+	mv $(BR2_EXTERNAL)/buildroot/package/llvm-project/clang/clang.hash $(BR2_EXTERNAL)/buildroot/package/llvm-project/clang/clang.hash.bak || :
+endef
+
+define RESTORE_CLANG_HASH_IF_NOT_BUILD_FROM_SOURCE
+	mv $(BR2_EXTERNAL)/buildroot/package/llvm-project/clang/clang.hash.bak $(BR2_EXTERNAL)/buildroot/package/llvm-project/clang/clang.hash || :
+endef
+
+define DISABLE_CLANG_PATCHES_IF_NOT_BUILD_FROM_SOURCE
+	$(foreach dir,$(call pkg-patches-dirs,$(PKG)),\
+		mkdir -p $(dir)/tmp_disabled_patches ; mv -v $(dir)/*.patch $(dir)/tmp_disabled_patches/ ; \
+	)
+endef
+
+define ENABLE_CLANG_PATCHES_IF_NOT_BUILD_FROM_SOURCE
+	$(foreach dir,$(call pkg-patches-dirs,$(PKG)),\
+		mv -v $(dir)/tmp_disabled_patches/* $(dir)/ ; rmdir $(dir)/tmp_disabled_patches ; \
+	)
+endef
+
+CLANG_PRE_DOWNLOAD_HOOKS += RENAME_CLANG_HASH_IF_NOT_BUILD_FROM_SOURCE
+CLANG_POST_DOWNLOAD_HOOKS += RESTORE_CLANG_HASH_IF_NOT_BUILD_FROM_SOURCE
+CLANG_PRE_PATCH_HOOKS += DISABLE_CLANG_PATCHES_IF_NOT_BUILD_FROM_SOURCE
+CLANG_POST_PATCH_HOOKS += ENABLE_CLANG_PATCHES_IF_NOT_BUILD_FROM_SOURCE
+
+define CLANG_EXTRACT_CMDS
+	# extract host folder
+	tar -C $(HOST_DIR)/../ -xvf $(DL_DIR)/$(CLANG_DL_SUBDIR)/$(CLANG_SOURCE) host
+endef
+
+define CLANG_INSTALL_TARGET_CMDS
+	# extract target folder
+	tar -C $(TARGET_DIR)/../ -xvf $(DL_DIR)/$(CLANG_DL_SUBDIR)/$(CLANG_SOURCE) target
+endef
+
+$(eval $(generic-package))
+endif
+
