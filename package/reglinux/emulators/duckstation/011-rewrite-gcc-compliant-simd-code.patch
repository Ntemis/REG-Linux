--- a/src/common/gsvector.h	2024-07-14 00:45:52.366190784 +0200
+++ b/src/common/gsvector.h	2024-07-14 00:46:02.270412155 +0200
@@ -7,8 +7,8 @@
 
 #if defined(CPU_ARCH_SSE)
 #include "common/gsvector_sse.h"
-#elif defined(CPU_ARCH_NEON)
-#include "common/gsvector_neon.h"
+#elif defined(CPU_ARCH_NEON) && defined(CPU_ARCH_ARM64)
+#include "common/gsvector_neon.h"
 #else
 #include "common/gsvector_nosimd.h"
 #endif
--- a/src/common/gsvector_neon.h	2024-07-14 10:58:01.490474883 +0200
+++ b/src/common/gsvector_neon.h	2024-07-14 12:48:39.479873540 +0200
@@ -778,7 +779,7 @@
 
   ALWAYS_INLINE int mask() const
   {
-    const uint32x2_t masks = vshr_n_u32(vreinterpret_u32_s32(v2s), 31);
+    const uint32x2_t masks = vshr_n_u32(vreinterpret_u32_s32(vreinterpret_s32_f32(v2s)), 31);
     return (vget_lane_u32(masks, 0) | (vget_lane_u32(masks, 1) << 1));
   }
 
@@ -2074,7 +2076,7 @@
     u16 U16[8];
     u32 U32[4];
     u64 U64[2];
-    float32x4_t v4s;
+    float32x4_t v4f;
   };
 
   GSVector4() = default;
@@ -2132,11 +2136,11 @@
     return GSVector4(vreinterpretq_f32_f64(vsetq_lane_f64(y, vdupq_n_f64(x), 1)));
   }
 
-  ALWAYS_INLINE void operator=(float f) { v4s = vdupq_n_f32(f); }
+  ALWAYS_INLINE void operator=(float f) { v4f = vdupq_n_f32(f); }
 
-  ALWAYS_INLINE void operator=(float32x4_t m) { v4s = m; }
+  ALWAYS_INLINE void operator=(float32x4_t m) { v4f = m; }
 
-  ALWAYS_INLINE operator float32x4_t() const { return v4s; }
+  ALWAYS_INLINE operator float32x4_t() const { return v4f; }
 
   /// Makes Clang think that the whole vector is needed, preventing it from changing shuffles around because it thinks
   /// we don't need the whole vector Useful for e.g. preventing clang from optimizing shuffles that remove
@@ -2468,8 +2472,8 @@
   // clang-format off
 
 #define VECTOR4_SHUFFLE_4(xs, xn, ys, yn, zs, zn, ws, wn) \
-    ALWAYS_INLINE GSVector4 xs##ys##zs##ws() const { return GSVector4(__builtin_shufflevector(v4s, v4s, xn, yn, zn, wn)); } \
-    ALWAYS_INLINE GSVector4 xs##ys##zs##ws(const GSVector4& v) const { return GSVector4(__builtin_shufflevector(v4s, v.v4s, xn, yn, 4 + zn, 4 + wn)); }
+    ALWAYS_INLINE GSVector4 xs##ys##zs##ws() const { return GSVector4(__builtin_shufflevector(v4f, v4f, xn, yn, zn, wn)); } \
+    ALWAYS_INLINE GSVector4 xs##ys##zs##ws(const GSVector4& v) const { return GSVector4(__builtin_shufflevector(v4f, v.v4f, xn, yn, 4 + zn, 4 + wn)); }
 
 #define VECTOR4_SHUFFLE_3(xs, xn, ys, yn, zs, zn) \
     VECTOR4_SHUFFLE_4(xs, xn, ys, yn, zs, zn, x, 0) \
