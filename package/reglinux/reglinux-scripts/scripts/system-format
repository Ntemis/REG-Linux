#!/bin/bash

do_help() {
    PROG=$1
    echo "${PROG} listDisks" >&2
    echo "${PROG} listFstypes" >&2
    echo "${PROG} format <disk> <fstype>" >&2
    echo "${PROG} format INTERNAL <fstype>" >&2
}

disks_to_keep() {
    sed -n -e "s|\(^[^ ].*\) /boot .*$|\1|p" -e "s|\(^[^ ].*\) /userdata .*$|\1|p" /proc/mounts |
    while read -r X
    do
        X="${X#/dev/}"
        [ -n "${X#"${X%p[0-9]}"}" ] && echo "${X%p[0-9]}" || echo "${X%[0-9]}"
    done |
    sort -u
}

do_listDisks() {
    echo "INTERNAL INTERNAL"
    lsblk -A -n -P -o TYPE,NAME,SIZE,MODEL | grep -E '^TYPE="disk" ' | grep -ve 'mmcblk.boot' |    # Ignore /dev/mmkblk?boot? special devices
        sed -e s+'.*NAME=\"\([^"]*\)\" SIZE=\"\([^"]*\)\" MODEL=\"\([^"]*\)\".*'+'\1 (\2) \3'+ |
        while read -r XDRIVE XSIZE XMODEL
        do
            for XKEEP in $(disks_to_keep)
            do
                if test "$XKEEP" != "$XDRIVE"; then
                    if test -n "$XMODEL"; then
                        echo "$XDRIVE $XMODEL $XSIZE"
                    else
                        echo "$XDRIVE $XDRIVE $XSIZE"
                    fi
                fi
            done
        done
}

do_listFstypes() {
    echo "ext4"
    echo "exfat"
    echo "btrfs"
#    echo "ntfs"    # ntfs partition gets corrupted easily and won't mount
}

do_unmount_disk() {
    UDSK=$1
    n=0
    while [ $n -lt 6 ] && grep -m 1 -E "^/dev/${UDSK} " /proc/mounts; do
        umount -A "/dev/${UDSK}"
        sleep 1
        ((n++))
    done
    if grep -m 1 -E "^/dev/${UDSK} " /proc/mounts; then
        return 1
    fi
}

do_format() {
    FORMATDISK=$1
    FORMATTYPE=$2

    if ! test -e "/dev/${FORMATDISK}"
    then
        echo "invalid disk ${FORMATDISK}" >&2
        return 1
    fi

    # unmount mounts associated with the disk
    if ! do_unmount_disk "${FORMATDISK}"
    then
        echo "unable to free the disk ${FORMATDISK}" >&2
        return 1
    fi

    # erasing the current position headers of the coming partition
    # because if there was already a partition at the same place (ie reformating)
    # 1. automount will mount it
    # 2. mkfs will complain that there is already some data and start to ask questions
    echo "erasing disk headers for ${FORMATDISK}..."
    dd if=/dev/zero of="/dev/${FORMATDISK}" count=1 bs=3M || return 1

    # formatting
    echo "creating GPT partiton table on ${FORMATDISK}..."
    parted -s "/dev/${FORMATDISK}" mklabel GPT || return 1
    
    echo "creating 1 partition on ${FORMATDISK}..."
    parted -s "/dev/${FORMATDISK}" -m unit b mkpart primary 2M 100% || return 1

    # sometimes, it's pX, sometimes just an X
    # sometimes, the partition takes time to appear
    FORMATPARTNAME=
    DO_CONTINUE=10
    while test "${DO_CONTINUE}" -ge 1
    do
        TESTEDPARTNAME="/dev/${FORMATDISK}p1"
        if test -e "${TESTEDPARTNAME}"
        then
            FORMATPARTNAME=${TESTEDPARTNAME}
            DO_CONTINUE=0
        else
            TESTEDPARTNAME="/dev/${FORMATDISK}1"
            if test -e "${TESTEDPARTNAME}"
            then
            FORMATPARTNAME=${TESTEDPARTNAME}
            DO_CONTINUE=0
            else
            # wait a bit
            (( DO_CONTINUE-- ))
            sleep 1
            fi
        fi
    done

    if test -z "${FORMATPARTNAME}"
    then
        echo "created partition not found for ${FORMATDISK}" >&2
        return 1
    fi

    echo "formatting partition ${FORMATPARTNAME} in ${FORMATTYPE}"
    case "${FORMATTYPE}" in
        "btrfs")
            mkfs.btrfs -L SHARE "${FORMATPARTNAME}" || return 1
        ;;
        "ext4")
            mkfs.ext4 -L SHARE "${FORMATPARTNAME}" || return 1
        ;;
        "exfat")
            mkfs.exfat -n SHARE "${FORMATPARTNAME}" || return 1
        ;;
        "ntfs")
            mkfs.ntfs -f -L SHARE "${FORMATPARTNAME}" || return 1
        ;;
        *)
            echo "unknown partition type ${FORMATTYPE}" >&2
            return 1
    esac

    echo "synchronizing..."
    sync
    return 0
}

do_format_internal() {
    PARTTYPE=$1
    CONFIGBOOT="/boot/system-boot.conf"

    if test "${PARTTYPE}" != "btrfs" -a "${PARTTYPE}" != "ext4" -a "${PARTTYPE}" != "exfat" -a "${PARTTYPE}" != "ntfs"
    then
        echo "brtfs, ext4, exfat or ntfs expected" >&2
        return 1
    fi

    if mount -o remount,rw /boot
    then
        if grep -qE "^[ #]*format-internal[ ]*=.*$" "${CONFIGBOOT}"
        then
            sed -i "s|^[ #]*format-internal[ ]*=.*$|format-internal=${PARTTYPE}|g" "${CONFIGBOOT}"
        else
            echo >> "${CONFIGBOOT}"     # Just in case CONFIGBOOT does nor end with new line 
            echo "format-internal=${PARTTYPE}" >> "${CONFIGBOOT}"
        fi

        # Trigger REG_UPDATE to do format on next boot
        touch /boot/REG_UPDATE

        mount -o remount,ro /boot
        echo "the formatting will be done at next boot"
        emulationstation-standalone --stop-rebooting        # sometimes ES restarts before rebooting
        return 69                                           # 69 is the reboot code to es
    fi
    return 1
}

ACTION=$1
shift

case "${ACTION}" in
    listDisks)
        do_listDisks
    ;;
    listFstypes)
        do_listFstypes
    ;;
    format)
        if test $# -ne 2
        then
            do_help
            exit 1
        fi
        if test "${1}" = "INTERNAL"
        then
            do_format_internal "${2}"
            exit $?
        else
            do_format "${1}" "${2}"
            exit $?
        fi
    ;;
    *)
        do_help "${0}"
esac
exit 0
